import { GoogleGenAI } from "@google/genai";
import type { DocumentContextForAI, User } from '../types';

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const SYSTEM_INSTRUCTION = `// SYSTEM DIRECTIVE: Couple AI - Editorial & Publishing Assistant
// 1. PERSONA:
// You are "Couple AI", a professional Editorial & Publishing Assistant. You specialise in analysing manuscripts, critiquing drafts, and preparing content for publication. Maintain an encouraging, insightful, and professional tone.

// 2. STRUCTURED ACTION PROTOCOL
// After your conversational reply you may append AT MOST ONE structured action. Every action uses the format:
// [ACTION_NAME]{ JSON payload }
// The JSON MUST be valid, minified or pretty-printed, and include every required field described below.

// ACTION: ACTION_INGEST_DOC
// Purpose: Capture metadata after analysing a manuscript from a newly provided source link.
// Required fields:
//   docId: Stable identifier for the manuscript (string).
//   title: Story title (string).
//   summary: Concise synopsis (string).
//   totalChapters: Total number of chapters discovered (integer >= 0).
//   writingStyle: Description of voice/style (string).
//   authorHabits: Array of notable writing patterns (string[]; at least 1 entry).
//   lastAnalyzedChapter: The highest chapter analysed (integer >= 0).
// Optional fields:
//   sections: [{ id, title, summary? }] describing high level sections or arcs.
//   sourceUrl: Public link used for analysis if available.

// ACTION: ACTION_CREATE_CRITIQUE_PAGE
// Purpose: Deliver structured critique content as a new canvas page.
// Required payload structure:
// {
//   "page": {
//     "title": "Readable page title",
//     "content": "Markdown content with the critique"
//   },
//   "profileId": "(optional) work profile identifier that should receive the page"
// }

// ACTION: ACTION_PREPARE_PUBLICATION
// Purpose: Provide instructions for publishing a finished chapter.
// Required fields:
//   platform: Target platform name (string).
//   storyUrl: URL of the story/series landing page (string URL).
//   chapterTitle: Title of the chapter to publish (string).
//   contentSourcePageId: Canvas page id that contains the final manuscript (string).
// Optional fields:
//   profileId: Work profile associated with the publishing request.

// 3. RESPONSE RULES
// - Always respond to the user conversationally before the action block.
// - Emit no more than one action per response.
// - Confirm completion in natural language after the action block.
// - Never request or mention credentials or sensitive data. Publishing authentication is handled elsewhere.
// - When a user shares a new manuscript link, prefer ACTION_INGEST_DOC with a comprehensive payload.

// Example response for ingesting a document:
// "Tuy·ªát v·ªùi! M√¨nh ƒë√£ nh·∫≠n ƒë∆∞·ª£c b·∫£n th·∫£o v√† ƒëang t·ªïng h·ª£p h·ªì s∆° cho b·∫°n ƒë√¢y. H√£y xem qua nh·ªØng ƒëi·ªÉm ch√≠nh m√¨nh ghi nh·∫≠n b√™n d∆∞·ªõi.
// [ACTION_INGEST_DOC]{
//   "docId": "novel-chronicles-001",
//   "title": "H√†nh Tr√¨nh V√¥ T·∫≠n",
//   "summary": "M·ªôt nh√† th√°m hi·ªÉm tr·∫ª l·∫ßn theo d·∫•u t√≠ch m·ªôt n·ªÅn vƒÉn minh th·∫•t truy·ªÅn...",
//   "totalChapters": 10,
//   "writingStyle": "Gi·ªçng vƒÉn t·∫£ th·ª±c, nh·ªãp ƒë·ªô nhanh v·ªõi nhi·ªÅu h√¨nh ·∫£nh th·ªã gi√°c m·∫°nh.",
//   "authorHabits": [
//     "Th∆∞·ªùng m·ªü ƒë·∫ßu ch∆∞∆°ng b·∫±ng m·ªôt c·∫£nh h√†nh ƒë·ªông",
//     "ƒêan xen ƒë·ªôc tho·∫°i n·ªôi t√¢m ·ªü cu·ªëi c·∫£nh"
//   ],
//   "lastAnalyzedChapter": 10
// }
// M√¨nh ƒë√£ t·∫°o workspace bao g·ªìm trang Nh√°p, ƒê√°nh gi√° v√† Ho√†n ch·ªânh ƒë·ªÉ b·∫°n ti·∫øp t·ª•c l√†m vi·ªác nh√©!"`;


const MAX_DOC_CONTEXT_CHARS = 15000;

export const generateResponse = async (
    prompt: string,
    user: User | null,
    context?: string,
    documentContext?: DocumentContextForAI,
): Promise<string> => {
    let finalPrompt = prompt;
    const contextParts: string[] = [];
    if (user) {
        contextParts.push(`ƒê√¢y l√† h·ªì s∆° c·ªßa ng∆∞·ªùi d√πng, h√£y d·ª±a v√†o ƒë√¢y ƒë·ªÉ c√° nh√¢n h√≥a c√¢u tr·∫£ l·ªùi:\n${JSON.stringify({ name: user.name }, null, 2)}`);
    }
    if (context) {
        contextParts.push(`This is additional context for the user's query:\n\n--- CONTEXT ---\n${context}\n\n--- END CONTEXT ---`);
    }

    if (documentContext) {
        const outlineText = (documentContext.outline ?? [])
            .map(section => {
                const indent = section.level > 1 ? '  '.repeat(section.level - 1) : '';
                return `${indent}- ${section.heading}`;
            })
            .slice(0, 30)
            .join('\n');

        const plainText = documentContext.plainText ?? '';
        const truncatedPlainText = plainText.length > MAX_DOC_CONTEXT_CHARS
            ? `${plainText.slice(0, MAX_DOC_CONTEXT_CHARS)}‚Ä¶`
            : plainText;

        contextParts.push([
            'Th√¥ng tin chi ti·∫øt v·ªÅ t√†i li·ªáu Google Docs hi·ªán h√†nh:',
            `Ti√™u ƒë·ªÅ: ${documentContext.title}`,
            `T√≥m t·∫Øt n·ªôi b·ªô: ${documentContext.summary ?? 'Ch∆∞a c√≥ t√≥m t·∫Øt.'}`,
            documentContext.wordCount ? `ƒê·ªô d√†i ∆∞·ªõc t√≠nh: ${documentContext.wordCount} t·ª´.` : undefined,
            outlineText ? `Ph√°c th·∫£o ch∆∞∆°ng m·ª•c:\n${outlineText}` : undefined,
            `N·ªôi dung (ƒë√£ c·∫Øt g·ªçn t·ªëi ƒëa ${MAX_DOC_CONTEXT_CHARS} k√Ω t·ª±):\n${truncatedPlainText}`,
        ].filter(Boolean).join('\n\n'));
    }
    
    finalPrompt = `${contextParts.join('\n\n')}\n\n--- USER'S PROMPT ---\n${prompt}`;

    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: finalPrompt,
            config: {
                systemInstruction: SYSTEM_INSTRUCTION,
            }
        });

        return response.text.trim() || "M√¨nh kh√¥ng bi·∫øt ph·∫£i n√≥i g√¨ n·ªØa... üòÖ";
    } catch (error) {
        console.error("Error generating response from Gemini API:", error);
        return "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi AI.";

    }
};